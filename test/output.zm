
// The chosen interpretation
enum inter_t {
    INT_NL,
    INT_ES,
    INT_CORRECT,
    INT_INCORRECT
};


// Describes the output of each trial in the experiment.
record TestOutput {
    int     id;                     // item id
    item_type type;                 // the item type
    int     reading_time;           // time to read sentences
    string  fn1;                    // filename of first picture
    string  fn2;                    // filename of 2nd picture
    string  s1;                     // first sentence
    int     s1_type;                // the type of the sentence 1
    pic_t   s1_first_resp;          // value of the first response on sentence 1
    pic_t   s1_final_resp;          // value of the last response on sentence 1
    inter_t s1_first_inter;         // value of the first interpretation 1
    inter_t s1_final_inter;         // value of the final interpretation 1

    int     s1_first_resp_i;        // value of the first response on sentence 1
    int     s1_final_resp_i;        // value of the last response on sentence 1
    int     s1_first_inter_i;       // value of the first interpretation 1
    int     s1_final_inter_i;       // value of the final interpretation 1

    int     first_response_time;    // rt of the first response
    int     final_response_time;    // rt of the last response
};

// Output of the practice phase
TestOutput[..]  prac_output;
// Output of the test phase
TestOutput[..]  test_output;

// output Target items;
TestOutput[..]  target_output;
// output Control items;
TestOutput[..]  control_output;
// output Filler items;
TestOutput[..]  filler_output;

// Increases the size of the array by one and put the new value there.
void test_output_append(TestOutput[] array, TestOutput output)
{
    array.size = array.size + 1;
    array[array.size - 1] = output;
}

// save the practise output
void prac_output_save()
{
    // Append table to CSV file (create if non-existent). The filename format
    // is: <dbname>/<dbnum>/<expname>/<phasename>/ses<sesid>-<tblnum>.csv
    string fn = expdb.experiment.session.create_table("practice", 1);
    prac_output.append(fn, namespace_name + ": prac results");
    prac_output.size = 0;
}

// save the test output
void test_output_save()
{
    // Append table to CSV file (create if non-existent). The filename format
    // is: <dbname>/<dbnum>/<expname>/<phasename>/ses<sesid>-<tblnum>.csv
    string fn = expdb.experiment.session.create_table(namespace_name, 2);
    test_output.append(fn, namespace_name + ": test results");
    test_output.size = 0;
    
    fn = expdb.experiment.session.create_table("target", 3);
    target_output.append(fn, namespace_name + ": target results");
    target_output.size = 0;
    
    fn = expdb.experiment.session.create_table("control", 4);
    control_output.append(fn, namespace_name + ": control results");
    control_output.size = 0;
    
    fn = expdb.experiment.session.create_table("filler", 5);
    filler_output.append(fn, namespace_name + ": filler results");
    filler_output.size = 0;
}
