
import instructions;
import output;
import test_page;

Block task 
{
    on_event:entry()
    {
        if (shuffle_stimuli() != OK)
            terminate "Unable to shuffle test items.";
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Part prac_instruction
    {
        on_event:entry()
        {
            pause_page.set_text(PRE_PRAC_INSTRUCTION, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block practice
    {
        on_event:entry()
        {
            num_cycles = prac_items.size;
            test_page.setup(num_cycles, true);
        }
        
        on_event:exit()
        {
            test_page.cleanup();
            // prac_output_save();
        }

        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                item = prac_items[practice.cycle];
            }

            on_event:exit()
            {
                TestOutput output;
                test_output_append(prac_output, output);
            }

            SubTrial reading
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time, test.cycle);
                }
            }

            SubTrial answer
            {
                on_event:entry()
                {
                    test_page.action_answer(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part test_instruction
    {
        on_event:entry()
        {
            pause_page.set_text(PRE_TEST_INSTRUCTION, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block test
    {
        on_event:entry()
        {
            num_cycles = test_items.size;
            test_page.setup(num_cycles, true);
        }

        on_event:exit()
        {
            test_page.cleanup();
            test_output_save();
        }

        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                item = test_items[test.cycle];
            }

            on_event:exit()
            {
                TestOutput output;
                test_output_append(test_output, output);
            }

            SubTrial reading
            {
                on_event:entry()
                {
                    test_page.action(this, item, reference_time, test.cycle);
                }
            }

            SubTrial answer
            {
                on_event:entry()
                {
                    test_page.action_answer(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }
        }
    }
}

void action(Part caller)
{
    task.enter(caller);
}
