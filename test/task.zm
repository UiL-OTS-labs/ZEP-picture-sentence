
import instructions;
import output;
import test_page;

// Returns the interpretation of the participant
// or the discussed integer value that belongs to a given type of picture and
// sentence.
int interpretation(pic_t p, sen_t s)
{
    int retval = -1;
    if      (p == PIC_NON_ALIENABLE && s == SEN_ARTICLE)
        retval = 1;
    else if (p == PIC_ALIENABLE     && s == SEN_ARTICLE)
        retval = 2;
    else if (p == PIC_NON_ALIENABLE && s == SEN_PRONOUN)
        retval = 3;
    else if (p == PIC_ALIENABLE     && s == SEN_PRONOUN)
        retval = 4;
    else if (p == PIC_REFLEXIVE     && s == SEN_REFLEXIVE)
        retval = 1;
    else if (p == PIC_TRANSITIVE    && s == SEN_TRANSITIVE)
        retval = 1;
    else if (p == PIC_REFLEXIVE     && s == SEN_TRANSITIVE)
        retval = 0;
    else if (p == PIC_TRANSITIVE    && s == SEN_REFLEXIVE)
        retval = 0;
    else if (p == PIC_OMISSION)
        retval = 2;

    return retval;
}

Block task 
{
    on_event:entry()
    {
        // Shuffling happens in modules/session.zm
//        if (shuffle_stimuli() != OK)
//            terminate "Unable to shuffle test items.";
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }


    Part prac_instruction
    {
        on_event:entry()
        {
            pause_page.set_text(PRE_PRAC_INSTRUCTION, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block practice
    {
        on_event:entry()
        {
            num_cycles = prac_items.size;
            test_page.setup(num_cycles, true);
        }
        
        on_event:exit()
        {
            test_page.cleanup();
            prac_output_save();
        }

        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                item = prac_items[practice.cycle];
            }

            on_event:exit()
            {
                TestOutput output;

                output.id       = item.id;
                output.type     = item.type;

                // Whether the participant chose the left "A", right "B"
                // picture or "" when no response was made in time .
                string response = test_page.response_pictures.chosen;

                output.reading_time = int(test_page.response_sentences.rt);
                output.fn1          = item.fn1;
                output.fn2          = item.fn2;

                output.sentence     = item.s1;
                output.sen_type     = item.s1_type;

                if (response == "A")
                    output.pic_resp = item.picA_val;
                else if (response == "B")
                    output.pic_resp = item.picB_val;
                else 
                    output.pic_resp = PIC_OMISSION;

                output.response_value = interpretation(
                        output.pic_resp,
                        output.sen_type
                        );

                output.response_time = test_page.response_pictures.rt;

                test_output_append(prac_output, output);
            }

            SubTrial reading
            {
                on_event:entry()
                {
                    test_page.action(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }

            SubTrial answer
            {
                on_event:entry()
                {
                    test_page.action_answer(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Part test_instruction
    {
        on_event:entry()
        {
            pause_page.set_text(PRE_TEST_INSTRUCTION, true);

            pause_page.action(this);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }
    
    Part
    {
        on_event:entry()
        {
            blank_page.action_auto(this, 500ms);
            control.button_box.enable_all_buttons(CONTINUE);
        }
    }

    Block test
    {
        on_event:entry()
        {
            num_cycles = test_items[selected_group].size;
            test_page.setup(num_cycles, true);
        }

        on_event:exit()
        {
            test_page.cleanup();
            test_output_save();
        }

        Trial trial
        {
            TestItem item;

            on_event:entry()
            {
                item = test_items[selected_group][test.cycle];
            }

            on_event:exit()
            {
                TestOutput output;

                output.id       = item.id;
                output.type     = item.type;

                string response = test_page.response_pictures.chosen;

                output.reading_time = int(test_page.response_sentences.rt);
                output.fn1          = item.fn1;
                output.fn2          = item.fn2;

                output.sentence     = item.s1;
                output.sen_type     = item.s1_type;

                if (response == "A")
                    output.pic_resp = item.picA_val;
                else if (response == "B")
                    output.pic_resp = item.picB_val;
                else 
                    output.pic_resp = PIC_OMISSION;

                output.response_value = interpretation(
                        output.pic_resp,
                        output.sen_type
                        );

                output.response_time = test_page.response_pictures.rt;

                test_output_append(test_output, output);
                if (item.type == ITEM_TARGET) {
                    test_output_append(target_output, output);
                }
                if (item.type == ITEM_CONTROL) {
                    test_output_append(control_output, output);
                }
                if (item.type == ITEM_FILLER) {
                    test_output_append(filler_output, output);
                }
            }

            SubTrial reading
            {
                on_event:entry()
                {
                    test_page.action(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }

            SubTrial answer
            {
                on_event:entry()
                {
                    test_page.action_answer(
                        this,
                        item,
                        reference_time,
                        test.cycle
                        );
                }
            }
        }
    }
}

void action(Part caller)
{
    task.enter(caller);
}
